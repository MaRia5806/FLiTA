import sys

sys.tracebacklimit = 0

class StackError(Exception):
    def __init__(self, original_exception):
        super().__init__(f"Error occurred in Stack operation: {str(original_exception)}")
        self.original_exception = original_exception


class SetError(Exception):
    def __init__(self, original_exception, operation, element=None):
        if element:
            super().__init__(
                f"Error occurred in Set operation '{operation}' with element '{element}': {str(original_exception)}")
        else:
            super().__init__(f"Error occurred in Set operation '{operation}': {str(original_exception)}")
        self.original_exception = original_exception
        self.operation = operation
        self.element = element


class StackNode:
    def __init__(self, data):
        self.data = data
        self.next = None

    def __str__(self):
        return f'Node <{id(self)}>: [{self.data}];'


class Stack:
    def __init__(self):
        self.top = None

    def is_empty(self):
        return self.top is None

    def push(self, data):
        try:
            new_node = StackNode(data)
            new_node.next = self.top
            self.top = new_node
        except Exception as e:
            raise StackError(e)

    def pop(self):
        try:
            if self.is_empty():
                raise IndexError('pop from empty stack')
            popped_node = self.top
            self.top = self.top.next
            return popped_node.data
        except Exception as e:
            raise StackError(e)

    def peek(self):
        try:
            if self.is_empty():
                raise KeyError('peek from empty stack')
            return self.top.data
        except Exception as e:
            raise StackError(e)

    def __str__(self):
        values = []
        current = self.top
        while current:
            values.append(str(current.data))
            current = current.next
        return f'Stack <{id(self)}>: [{"] -> [".join(values)}];'


class Set:
    def __init__(self):
        self.stack = Stack()

    def add(self, element):
        try:
            current = self.stack.top
            while current:
                if current.data == element:
                    return
                current = current.next
            self.stack.push(element)
        except Exception as e:
            raise SetError(e, 'add', element)

    def remove(self, element):
        try:
            current = self.stack.top
            prev = None
            while current:
                if current.data == element:
                    if prev:
                        prev.next = current.next
                    else:
                        self.stack.top = current.next
                    return
                prev = current
                current = current.next
            raise KeyError(f'element {element} not found in the set')
        except Exception as e:
            raise SetError(e, 'remove', element)

    def contains(self, element):
        try:
            current = self.stack.top
            while current:
                if current.data == element:
                    return True
                current = current.next
            return False
        except Exception as e:
            raise SetError(e, 'contains', element)

    def __str__(self):
        values = []
        current = self.stack.top
        while current:
            values.append(str(current.data))
            current = current.next
        return f'Set <{id(self)}>: ({", ".join(values)});'


def decimal_to_binary(n):
    return bin(n)[2:]


def transfer(input_set):
    binary_set = Set()
    current = input_set.stack.top
    while current:
        element = current.data
        try:
            if not isinstance(element, int):
                raise ValueError(f'set element \'{element}\' is not an integer')
            binary_set.add(decimal_to_binary(element))
        except Exception as e:
            raise SetError(e, 'convert_to_binary', element)
        current = current.next
    return binary_set


# Ввод множества
input_set = Set()
elements = input("Введите элементы множества через пробел, затем нажмите Enter: ").split()
for element in elements:
    try:
        input_set.add(int(element))
    except ValueError:
        print(f"Элемент '{element}' не является целым числом и не может быть переведен")

# Преобразование множества в двоичное представление
binary_set = transfer(input_set)

# Вывод исходного и преобразованного множеств
print("Множество в десятичной сс:", input_set)
print("Множество в двоичной сс:", binary_set)
